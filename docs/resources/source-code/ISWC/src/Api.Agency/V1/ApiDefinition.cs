//----------------------
// <auto-generated>
//     Generated using the NSwag toolchain v13.1.6.0 (NJsonSchema v10.0.28.0 (Newtonsoft.Json v11.0.0.0)) (http://NSwag.org)
// </auto-generated>
//----------------------

#pragma warning disable 108 // Disable "CS0108 '{derivedDto}.ToJson()' hides inherited member '{dtoBase}.ToJson()'. Use the new keyword if hiding was intended."
#pragma warning disable 114 // Disable "CS0114 '{derivedDto}.RaisePropertyChanged(String)' hides inherited member 'dtoBase.RaisePropertyChanged(String)'. To make the current member override that implementation, add the override keyword. Otherwise add the new keyword."
#pragma warning disable 472 // Disable "CS0472 The result of the expression is always 'false' since a value of type 'Int32' is never equal to 'null' of type 'Int32?'
#pragma warning disable 1573 // Disable "CS1573 Parameter '...' has no matching param tag in the XML comment for ...
#pragma warning disable 1591 // Disable "CS1591 Missing XML comment for publicly visible type or member ..."

namespace SpanishPoint.Azure.Iswc.Api.Agency.V1
{
    using System = global::System;
    
    [System.CodeDom.Compiler.GeneratedCode("NSwag", "13.1.6.0 (NJsonSchema v10.0.28.0 (Newtonsoft.Json v11.0.0.0))")]
    public interface IISWC_SubmissionController
    {
        /// <summary>Add a new ISWC submission to the database</summary>
        /// <param name="body">ISWC submission object that needs to be added to the ISWC Database</param>
        /// <returns>Submission added</returns>
        System.Threading.Tasks.Task<Microsoft.AspNetCore.Mvc.ActionResult<SubmissionResponse>> AddSubmissionAsync(Submission body);
    
        /// <summary>Update an existing ISWC submission</summary>
        /// <param name="preferredIswc">The preferred ISWC</param>
        /// <param name="body">ISWC submission object that needs to be updated in the ISWC Database</param>
        /// <returns>Submission updated</returns>
        System.Threading.Tasks.Task<Microsoft.AspNetCore.Mvc.ActionResult<SubmissionResponse>> UpdateSubmissionAsync(string preferredIswc, Submission body);
    
        /// <summary>Deletes an ISWC submission</summary>
        /// <param name="preferredIswc">The preferred ISWC</param>
        /// <param name="agency">Agency of ISWC submission to delete</param>
        /// <param name="workcode">Agency internal workcode for work as previously submitted</param>
        /// <param name="sourceDb">SourceDb of ISWC submission to delete</param>
        /// <param name="reasonCode">Reason Code for the deletion</param>
        /// <returns>Iswc submission successfully deleted</returns>
        System.Threading.Tasks.Task<Microsoft.AspNetCore.Mvc.IActionResult> DeleteSubmissionAsync(string preferredIswc, string agency, string workcode, int sourceDb, string reasonCode);
    
        /// <summary>Add a batch of new ISWC submissions to the database</summary>
        /// <param name="body">Array of ISWC submission objects that need to be added to the ISWC Database</param>
        /// <returns>Submissions processed</returns>
        System.Threading.Tasks.Task<Microsoft.AspNetCore.Mvc.ActionResult<System.Collections.Generic.ICollection<VerifiedSubmissionBatch>>> AddSubmissionBatchAsync(System.Collections.Generic.IEnumerable<SubmissionBatch> body);
    
        /// <summary>Update a batch of existing ISWC submissions</summary>
        /// <param name="body">ISWC submission objects that need to be updated in the ISWC Database</param>
        /// <returns>Submissions processed</returns>
        System.Threading.Tasks.Task<Microsoft.AspNetCore.Mvc.ActionResult<System.Collections.Generic.ICollection<VerifiedSubmissionBatch>>> UpdateSubmissionBatchAsync(System.Collections.Generic.IEnumerable<SubmissionBatch> body);
    
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NSwag", "13.1.6.0 (NJsonSchema v10.0.28.0 (Newtonsoft.Json v11.0.0.0))")]
    public partial class ISWC_SubmissionController : SpanishPoint.Azure.Iswc.Api.Agency.Configuration.Swagger.BaseController
    {
        private IISWC_SubmissionController _implementation;
    
        public ISWC_SubmissionController(IISWC_SubmissionController implementation)
        {
            _implementation = implementation;
        }
    
        /// <summary>Add a new ISWC submission to the database</summary>
        /// <param name="body">ISWC submission object that needs to be added to the ISWC Database</param>
        /// <returns>Submission added</returns>
        [Microsoft.AspNetCore.Mvc.HttpPost, Microsoft.AspNetCore.Mvc.Route("submission", Name = "addSubmission")]
        public System.Threading.Tasks.Task<Microsoft.AspNetCore.Mvc.ActionResult<SubmissionResponse>> AddSubmission([Microsoft.AspNetCore.Mvc.FromBody] Submission body)
        {
            return _implementation.AddSubmissionAsync(body);
        }
    
        /// <summary>Update an existing ISWC submission</summary>
        /// <param name="preferredIswc">The preferred ISWC</param>
        /// <param name="body">ISWC submission object that needs to be updated in the ISWC Database</param>
        /// <returns>Submission updated</returns>
        [Microsoft.AspNetCore.Mvc.HttpPut, Microsoft.AspNetCore.Mvc.Route("submission", Name = "updateSubmission")]
        public System.Threading.Tasks.Task<Microsoft.AspNetCore.Mvc.ActionResult<SubmissionResponse>> UpdateSubmission([Microsoft.AspNetCore.Mvc.FromQuery] string preferredIswc, [Microsoft.AspNetCore.Mvc.FromBody] Submission body)
        {
            return _implementation.UpdateSubmissionAsync(preferredIswc, body);
        }
    
        /// <summary>Deletes an ISWC submission</summary>
        /// <param name="preferredIswc">The preferred ISWC</param>
        /// <param name="agency">Agency of ISWC submission to delete</param>
        /// <param name="workcode">Agency internal workcode for work as previously submitted</param>
        /// <param name="sourceDb">SourceDb of ISWC submission to delete</param>
        /// <param name="reasonCode">Reason Code for the deletion</param>
        /// <returns>Iswc submission successfully deleted</returns>
        [Microsoft.AspNetCore.Mvc.HttpDelete, Microsoft.AspNetCore.Mvc.Route("submission", Name = "deleteSubmission")]
        public System.Threading.Tasks.Task<Microsoft.AspNetCore.Mvc.IActionResult> DeleteSubmission([Microsoft.AspNetCore.Mvc.FromQuery] string preferredIswc, [Microsoft.AspNetCore.Mvc.FromQuery] string agency, [Microsoft.AspNetCore.Mvc.FromQuery] string workcode, [Microsoft.AspNetCore.Mvc.FromQuery] int sourceDb, [Microsoft.AspNetCore.Mvc.FromQuery] string reasonCode)
        {
            return _implementation.DeleteSubmissionAsync(preferredIswc, agency, workcode, sourceDb, reasonCode);
        }
    
        /// <summary>Add a batch of new ISWC submissions to the database</summary>
        /// <param name="body">Array of ISWC submission objects that need to be added to the ISWC Database</param>
        /// <returns>Submissions processed</returns>
        [Microsoft.AspNetCore.Mvc.HttpPost, Microsoft.AspNetCore.Mvc.Route("submission/batch", Name = "addSubmissionBatch")]
        public System.Threading.Tasks.Task<Microsoft.AspNetCore.Mvc.ActionResult<System.Collections.Generic.ICollection<VerifiedSubmissionBatch>>> AddSubmissionBatch([Microsoft.AspNetCore.Mvc.FromBody] System.Collections.Generic.IEnumerable<SubmissionBatch> body)
        {
            return _implementation.AddSubmissionBatchAsync(body);
        }
    
        /// <summary>Update a batch of existing ISWC submissions</summary>
        /// <param name="body">ISWC submission objects that need to be updated in the ISWC Database</param>
        /// <returns>Submissions processed</returns>
        [Microsoft.AspNetCore.Mvc.HttpPut, Microsoft.AspNetCore.Mvc.Route("submission/batch", Name = "updateSubmissionBatch")]
        public System.Threading.Tasks.Task<Microsoft.AspNetCore.Mvc.ActionResult<System.Collections.Generic.ICollection<VerifiedSubmissionBatch>>> UpdateSubmissionBatch([Microsoft.AspNetCore.Mvc.FromBody] System.Collections.Generic.IEnumerable<SubmissionBatch> body)
        {
            return _implementation.UpdateSubmissionBatchAsync(body);
        }
    
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NSwag", "13.1.6.0 (NJsonSchema v10.0.28.0 (Newtonsoft.Json v11.0.0.0))")]
    public interface IISWC_Allocation_and_ResolutionController
    {
        /// <summary>Allocate a batch of new ISWC submissions</summary>
        /// <param name="body">Array of ISWC allocation objects that need to be added to the ISWC Database</param>
        /// <returns>Submissions processed</returns>
        System.Threading.Tasks.Task<Microsoft.AspNetCore.Mvc.ActionResult<System.Collections.Generic.ICollection<VerifiedSubmissionBatch>>> AddAllocationBatchAsync(System.Collections.Generic.IEnumerable<SubmissionBatch> body);
    
        /// <summary>Resolve a batch of ISWC submissions</summary>
        /// <param name="body">Array of ISWC submission objects that need to be resolved in the ISWC Database</param>
        /// <returns>Submissions processed</returns>
        System.Threading.Tasks.Task<Microsoft.AspNetCore.Mvc.ActionResult<System.Collections.Generic.ICollection<VerifiedSubmissionBatch>>> AddResolutionBatchAsync(System.Collections.Generic.IEnumerable<SubmissionBatch> body);
    
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NSwag", "13.1.6.0 (NJsonSchema v10.0.28.0 (Newtonsoft.Json v11.0.0.0))")]
    public partial class ISWC_Allocation_and_ResolutionController : SpanishPoint.Azure.Iswc.Api.Agency.Configuration.Swagger.BaseController
    {
        private IISWC_Allocation_and_ResolutionController _implementation;
    
        public ISWC_Allocation_and_ResolutionController(IISWC_Allocation_and_ResolutionController implementation)
        {
            _implementation = implementation;
        }
    
        /// <summary>Allocate a batch of new ISWC submissions</summary>
        /// <param name="body">Array of ISWC allocation objects that need to be added to the ISWC Database</param>
        /// <returns>Submissions processed</returns>
        [Microsoft.AspNetCore.Mvc.HttpPost, Microsoft.AspNetCore.Mvc.Route("allocation/batch", Name = "addAllocationBatch")]
        public System.Threading.Tasks.Task<Microsoft.AspNetCore.Mvc.ActionResult<System.Collections.Generic.ICollection<VerifiedSubmissionBatch>>> AddAllocationBatch([Microsoft.AspNetCore.Mvc.FromBody] System.Collections.Generic.IEnumerable<SubmissionBatch> body)
        {
            return _implementation.AddAllocationBatchAsync(body);
        }
    
        /// <summary>Resolve a batch of ISWC submissions</summary>
        /// <param name="body">Array of ISWC submission objects that need to be resolved in the ISWC Database</param>
        /// <returns>Submissions processed</returns>
        [Microsoft.AspNetCore.Mvc.HttpPost, Microsoft.AspNetCore.Mvc.Route("resolution/batch", Name = "addResolutionBatch")]
        public System.Threading.Tasks.Task<Microsoft.AspNetCore.Mvc.ActionResult<System.Collections.Generic.ICollection<VerifiedSubmissionBatch>>> AddResolutionBatch([Microsoft.AspNetCore.Mvc.FromBody] System.Collections.Generic.IEnumerable<SubmissionBatch> body)
        {
            return _implementation.AddResolutionBatchAsync(body);
        }
    
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NSwag", "13.1.6.0 (NJsonSchema v10.0.28.0 (Newtonsoft.Json v11.0.0.0))")]
    public interface IISWC_SearchController
    {
        /// <summary>Find ISWC metadata for specified ISWC</summary>
        /// <param name="iswc">The preferred ISWC</param>
        /// <returns>Iswc metadata found</returns>
        System.Threading.Tasks.Task<Microsoft.AspNetCore.Mvc.ActionResult<ISWCMetadata>> SearchByISWCAsync(string iswc);
    
        /// <summary>Find ISWC metadata for specified ISWCs</summary>
        /// <param name="body">Array of ISWC search objects</param>
        /// <returns>Iswc metadata found</returns>
        System.Threading.Tasks.Task<Microsoft.AspNetCore.Mvc.ActionResult<System.Collections.Generic.ICollection<ISWCMetadataBatch>>> SearchByISWCBatchAsync(System.Collections.Generic.IEnumerable<IswcSearchModel> body);
    
        /// <summary>Find ISWC metadata for specified Agency and WorkCode</summary>
        /// <param name="agency">The Agency of the ISWC submission</param>
        /// <param name="workCode">The Agency WorkCode of the ISWC submission</param>
        /// <param name="detailLevel">Allow the return of limited ISWC metadata</param>
        /// <returns>Iswc metadata found</returns>
        System.Threading.Tasks.Task<Microsoft.AspNetCore.Mvc.ActionResult<System.Collections.Generic.ICollection<ISWCMetadata>>> SearchByAgencyWorkCodeAsync(string agency, string workCode, DetailLevel? detailLevel);
    
        /// <summary>Find ISWC metadata for specified batch of Agency and WorkCodes</summary>
        /// <param name="body">Array of Agency Work Code search objects</param>
        /// <returns>Iswc metadata found</returns>
        System.Threading.Tasks.Task<Microsoft.AspNetCore.Mvc.ActionResult<System.Collections.Generic.ICollection<ISWCMetadataBatch>>> SearchByAgencyWorkCodeBatchAsync(System.Collections.Generic.IEnumerable<AgencyWorkCodeSearchModel> body);
    
        /// <summary>Find ISWC metadata for specified Titles and Contributors</summary>
        /// <returns>Iswc metadata found</returns>
        System.Threading.Tasks.Task<Microsoft.AspNetCore.Mvc.ActionResult<System.Collections.Generic.ICollection<ISWCMetadata>>> SearchByTitleAndContributorAsync(TitleAndContributorSearchModel body);
    
        /// <summary>Find ISWC metadata for specified batch of Titles and Contributors</summary>
        /// <param name="body">Array of ISWC search objects</param>
        /// <returns>Iswc metadata found</returns>
        System.Threading.Tasks.Task<Microsoft.AspNetCore.Mvc.ActionResult<System.Collections.Generic.ICollection<ISWCMetadataBatch>>> SearchByTitleAndContributorBatchAsync(System.Collections.Generic.IEnumerable<TitleAndContributorSearchModel> body);
    
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NSwag", "13.1.6.0 (NJsonSchema v10.0.28.0 (Newtonsoft.Json v11.0.0.0))")]
    public partial class ISWC_SearchController : SpanishPoint.Azure.Iswc.Api.Agency.Configuration.Swagger.BaseController
    {
        private IISWC_SearchController _implementation;
    
        public ISWC_SearchController(IISWC_SearchController implementation)
        {
            _implementation = implementation;
        }
    
        /// <summary>Find ISWC metadata for specified ISWC</summary>
        /// <param name="iswc">The preferred ISWC</param>
        /// <returns>Iswc metadata found</returns>
        [Microsoft.AspNetCore.Mvc.HttpGet, Microsoft.AspNetCore.Mvc.Route("iswc/searchByIswc", Name = "searchByISWC")]
        public System.Threading.Tasks.Task<Microsoft.AspNetCore.Mvc.ActionResult<ISWCMetadata>> SearchByISWC([Microsoft.AspNetCore.Mvc.FromQuery] string iswc)
        {
            return _implementation.SearchByISWCAsync(iswc);
        }
    
        /// <summary>Find ISWC metadata for specified ISWCs</summary>
        /// <param name="body">Array of ISWC search objects</param>
        /// <returns>Iswc metadata found</returns>
        [Microsoft.AspNetCore.Mvc.HttpPost, Microsoft.AspNetCore.Mvc.Route("iswc/searchByIswc/batch", Name = "searchByISWCBatch")]
        public System.Threading.Tasks.Task<Microsoft.AspNetCore.Mvc.ActionResult<System.Collections.Generic.ICollection<ISWCMetadataBatch>>> SearchByISWCBatch([Microsoft.AspNetCore.Mvc.FromBody] System.Collections.Generic.IEnumerable<IswcSearchModel> body)
        {
            return _implementation.SearchByISWCBatchAsync(body);
        }
    
        /// <summary>Find ISWC metadata for specified Agency and WorkCode</summary>
        /// <param name="agency">The Agency of the ISWC submission</param>
        /// <param name="workCode">The Agency WorkCode of the ISWC submission</param>
        /// <param name="detailLevel">Allow the return of limited ISWC metadata</param>
        /// <returns>Iswc metadata found</returns>
        [Microsoft.AspNetCore.Mvc.HttpGet, Microsoft.AspNetCore.Mvc.Route("iswc/searchByAgencyWorkCode", Name = "searchByAgencyWorkCode")]
        public System.Threading.Tasks.Task<Microsoft.AspNetCore.Mvc.ActionResult<System.Collections.Generic.ICollection<ISWCMetadata>>> SearchByAgencyWorkCode([Microsoft.AspNetCore.Mvc.FromQuery] string agency, [Microsoft.AspNetCore.Mvc.FromQuery] string workCode, [Microsoft.AspNetCore.Mvc.FromQuery] DetailLevel? detailLevel)
        {
            return _implementation.SearchByAgencyWorkCodeAsync(agency, workCode, detailLevel);
        }
    
        /// <summary>Find ISWC metadata for specified batch of Agency and WorkCodes</summary>
        /// <param name="body">Array of Agency Work Code search objects</param>
        /// <returns>Iswc metadata found</returns>
        [Microsoft.AspNetCore.Mvc.HttpPost, Microsoft.AspNetCore.Mvc.Route("iswc/searchByAgencyWorkCode/batch", Name = "searchByAgencyWorkCodeBatch")]
        public System.Threading.Tasks.Task<Microsoft.AspNetCore.Mvc.ActionResult<System.Collections.Generic.ICollection<ISWCMetadataBatch>>> SearchByAgencyWorkCodeBatch([Microsoft.AspNetCore.Mvc.FromBody] System.Collections.Generic.IEnumerable<AgencyWorkCodeSearchModel> body)
        {
            return _implementation.SearchByAgencyWorkCodeBatchAsync(body);
        }
    
        /// <summary>Find ISWC metadata for specified Titles and Contributors</summary>
        /// <returns>Iswc metadata found</returns>
        [Microsoft.AspNetCore.Mvc.HttpPost, Microsoft.AspNetCore.Mvc.Route("iswc/searchByTitleAndContributor", Name = "searchByTitleAndContributor")]
        public System.Threading.Tasks.Task<Microsoft.AspNetCore.Mvc.ActionResult<System.Collections.Generic.ICollection<ISWCMetadata>>> SearchByTitleAndContributor([Microsoft.AspNetCore.Mvc.FromBody] TitleAndContributorSearchModel body)
        {
            return _implementation.SearchByTitleAndContributorAsync(body);
        }
    
        /// <summary>Find ISWC metadata for specified batch of Titles and Contributors</summary>
        /// <param name="body">Array of ISWC search objects</param>
        /// <returns>Iswc metadata found</returns>
        [Microsoft.AspNetCore.Mvc.HttpPost, Microsoft.AspNetCore.Mvc.Route("iswc/searchByTitleAndContributor/batch", Name = "searchByTitleAndContributorBatch")]
        public System.Threading.Tasks.Task<Microsoft.AspNetCore.Mvc.ActionResult<System.Collections.Generic.ICollection<ISWCMetadataBatch>>> SearchByTitleAndContributorBatch([Microsoft.AspNetCore.Mvc.FromBody] System.Collections.Generic.IEnumerable<TitleAndContributorSearchModel> body)
        {
            return _implementation.SearchByTitleAndContributorBatchAsync(body);
        }
    
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NSwag", "13.1.6.0 (NJsonSchema v10.0.28.0 (Newtonsoft.Json v11.0.0.0))")]
    public interface IISWC_Usage_SearchController
    {
        /// <summary>Usage Search - Find ISWC metadata for specified batch of Titles and Contributors</summary>
        /// <param name="body">Array of ISWC search objects</param>
        /// <returns>Iswc metadata found</returns>
        System.Threading.Tasks.Task<Microsoft.AspNetCore.Mvc.ActionResult<System.Collections.Generic.ICollection<ISWCMetadataBatch>>> UsageSearchBatchAsync(System.Collections.Generic.IEnumerable<UPSearchModel> body);
    
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NSwag", "13.1.6.0 (NJsonSchema v10.0.28.0 (Newtonsoft.Json v11.0.0.0))")]
    public partial class ISWC_Usage_SearchController : SpanishPoint.Azure.Iswc.Api.Agency.Configuration.Swagger.BaseController
    {
        private IISWC_Usage_SearchController _implementation;
    
        public ISWC_Usage_SearchController(IISWC_Usage_SearchController implementation)
        {
            _implementation = implementation;
        }
    
        /// <summary>Usage Search - Find ISWC metadata for specified batch of Titles and Contributors</summary>
        /// <param name="body">Array of ISWC search objects</param>
        /// <returns>Iswc metadata found</returns>
        [Microsoft.AspNetCore.Mvc.HttpPost, Microsoft.AspNetCore.Mvc.Route("usage/search/batch", Name = "usageSearchBatch")]
        public System.Threading.Tasks.Task<Microsoft.AspNetCore.Mvc.ActionResult<System.Collections.Generic.ICollection<ISWCMetadataBatch>>> UsageSearchBatch([Microsoft.AspNetCore.Mvc.FromBody] System.Collections.Generic.IEnumerable<UPSearchModel> body)
        {
            return _implementation.UsageSearchBatchAsync(body);
        }
    
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NSwag", "13.1.6.0 (NJsonSchema v10.0.28.0 (Newtonsoft.Json v11.0.0.0))")]
    public interface IISWC_MergeController
    {
        /// <summary>Merge ISWC meta-data associated with a provided list of ISWCs or Society Work Codes and as part of the merge have an ISWC designated as preferred.</summary>
        /// <param name="preferredIswc">The preferred ISWC</param>
        /// <param name="agency">The agency submitting the merge request</param>
        /// <returns>ISWC Metadata merged and ISWC designated as preferred</returns>
        System.Threading.Tasks.Task<Microsoft.AspNetCore.Mvc.IActionResult> MergeISWCMetadataAsync(string preferredIswc, string agency, Body body);
    
        /// <summary>Delete a set of incorrect metadata from a single Preferred ISWC that was incorrectly merged / matched previously.</summary>
        /// <param name="preferredIswc">The preferred ISWC</param>
        /// <param name="agency">Agency of iswc submission to delete</param>
        /// <param name="workcode">Agency internal workcode for work as previously submitted</param>
        /// <returns>ISWC Metadata demerged</returns>
        System.Threading.Tasks.Task<Microsoft.AspNetCore.Mvc.IActionResult> DemergeISWCMetadataAsync(string preferredIswc, string agency, string workcode);
    
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NSwag", "13.1.6.0 (NJsonSchema v10.0.28.0 (Newtonsoft.Json v11.0.0.0))")]
    public partial class ISWC_MergeController : SpanishPoint.Azure.Iswc.Api.Agency.Configuration.Swagger.BaseController
    {
        private IISWC_MergeController _implementation;
    
        public ISWC_MergeController(IISWC_MergeController implementation)
        {
            _implementation = implementation;
        }
    
        /// <summary>Merge ISWC meta-data associated with a provided list of ISWCs or Society Work Codes and as part of the merge have an ISWC designated as preferred.</summary>
        /// <param name="preferredIswc">The preferred ISWC</param>
        /// <param name="agency">The agency submitting the merge request</param>
        /// <returns>ISWC Metadata merged and ISWC designated as preferred</returns>
        [Microsoft.AspNetCore.Mvc.HttpPost, Microsoft.AspNetCore.Mvc.Route("iswc/merge", Name = "mergeISWCMetadata")]
        public System.Threading.Tasks.Task<Microsoft.AspNetCore.Mvc.IActionResult> MergeISWCMetadata([Microsoft.AspNetCore.Mvc.FromQuery] string preferredIswc, [Microsoft.AspNetCore.Mvc.FromQuery] string agency, [Microsoft.AspNetCore.Mvc.FromBody] Body body)
        {
            return _implementation.MergeISWCMetadataAsync(preferredIswc, agency, body);
        }
    
        /// <summary>Delete a set of incorrect metadata from a single Preferred ISWC that was incorrectly merged / matched previously.</summary>
        /// <param name="preferredIswc">The preferred ISWC</param>
        /// <param name="agency">Agency of iswc submission to delete</param>
        /// <param name="workcode">Agency internal workcode for work as previously submitted</param>
        /// <returns>ISWC Metadata demerged</returns>
        [Microsoft.AspNetCore.Mvc.HttpDelete, Microsoft.AspNetCore.Mvc.Route("iswc/merge", Name = "demergeISWCMetadata")]
        public System.Threading.Tasks.Task<Microsoft.AspNetCore.Mvc.IActionResult> DemergeISWCMetadata([Microsoft.AspNetCore.Mvc.FromQuery] string preferredIswc, [Microsoft.AspNetCore.Mvc.FromQuery] string agency, [Microsoft.AspNetCore.Mvc.FromQuery] string workcode)
        {
            return _implementation.DemergeISWCMetadataAsync(preferredIswc, agency, workcode);
        }
    
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NSwag", "13.1.6.0 (NJsonSchema v10.0.28.0 (Newtonsoft.Json v11.0.0.0))")]
    public interface IISWC_Workflow_TasksController
    {
        /// <summary>Retrieve a list of outstanding Workflow Tasks associated with an Agency</summary>
        /// <param name="agency">CISAC Agency identifier</param>
        /// <param name="showWorkflows">Workflows assigned to or created by my Agency</param>
        /// <param name="workflowType">Type of Workflow</param>
        /// <param name="status">Workflow Status</param>
        /// <param name="startIndex">Start index for paging</param>
        /// <param name="pageLength">Number of records to return</param>
        /// <param name="fromDate">Left bound on date range</param>
        /// <param name="toDate">Right bound on date range</param>
        /// <param name="iswc">Filter by ISWC</param>
        /// <param name="agencyWorkCodes">Filter by Agency Work Codes - seperated by \';\'</param>
        /// <param name="originatingAgency">Filter by Originating Agency</param>
        /// <returns>List of outstanding Workflow Tasks</returns>
        System.Threading.Tasks.Task<Microsoft.AspNetCore.Mvc.ActionResult<System.Collections.Generic.ICollection<WorkflowTask>>> FindWorkflowTasksAsync(string agency, ShowWorkflows showWorkflows, WorkflowType? workflowType, System.Collections.Generic.IEnumerable<WorkflowStatus> status, int? startIndex, int? pageLength, string fromDate, string toDate, string iswc, string agencyWorkCodes, string originatingAgency);
    
        /// <summary>Update the status of an outstanding Workflow Tasks associated with an Agency</summary>
        /// <param name="agency">CISAC Agency identifier</param>
        /// <returns>Workflow Task updated</returns>
        System.Threading.Tasks.Task<Microsoft.AspNetCore.Mvc.ActionResult<System.Collections.Generic.ICollection<WorkflowTask>>> UpdateWorkflowTaskAsync(string agency, System.Collections.Generic.IEnumerable<WorkflowTaskUpdate> body);
    
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NSwag", "13.1.6.0 (NJsonSchema v10.0.28.0 (Newtonsoft.Json v11.0.0.0))")]
    public partial class ISWC_Workflow_TasksController : SpanishPoint.Azure.Iswc.Api.Agency.Configuration.Swagger.BaseController
    {
        private IISWC_Workflow_TasksController _implementation;
    
        public ISWC_Workflow_TasksController(IISWC_Workflow_TasksController implementation)
        {
            _implementation = implementation;
        }
    
        /// <summary>Retrieve a list of outstanding Workflow Tasks associated with an Agency</summary>
        /// <param name="agency">CISAC Agency identifier</param>
        /// <param name="showWorkflows">Workflows assigned to or created by my Agency</param>
        /// <param name="workflowType">Type of Workflow</param>
        /// <param name="status">Workflow Status</param>
        /// <param name="startIndex">Start index for paging</param>
        /// <param name="pageLength">Number of records to return</param>
        /// <param name="fromDate">Left bound on date range</param>
        /// <param name="toDate">Right bound on date range</param>
        /// <param name="iswc">Filter by ISWC</param>
        /// <param name="agencyWorkCodes">Filter by Agency Work Codes - seperated by \';\'</param>
        /// <param name="originatingAgency">Filter by Originating Agency</param>
        /// <returns>List of outstanding Workflow Tasks</returns>
        [Microsoft.AspNetCore.Mvc.HttpGet, Microsoft.AspNetCore.Mvc.Route("iswc/workflowTasks", Name = "findWorkflowTasks")]
        public System.Threading.Tasks.Task<Microsoft.AspNetCore.Mvc.ActionResult<System.Collections.Generic.ICollection<WorkflowTask>>> FindWorkflowTasks([Microsoft.AspNetCore.Mvc.FromQuery] string agency, [Microsoft.AspNetCore.Mvc.FromQuery] ShowWorkflows showWorkflows, [Microsoft.AspNetCore.Mvc.FromQuery] WorkflowType? workflowType, [Microsoft.AspNetCore.Mvc.FromQuery] System.Collections.Generic.IEnumerable<WorkflowStatus> status, [Microsoft.AspNetCore.Mvc.FromQuery] int? startIndex, [Microsoft.AspNetCore.Mvc.FromQuery] int? pageLength, [Microsoft.AspNetCore.Mvc.FromQuery] string fromDate, [Microsoft.AspNetCore.Mvc.FromQuery] string toDate, [Microsoft.AspNetCore.Mvc.FromQuery] string iswc, [Microsoft.AspNetCore.Mvc.FromQuery] string agencyWorkCodes, [Microsoft.AspNetCore.Mvc.FromQuery] string originatingAgency)
        {
            return _implementation.FindWorkflowTasksAsync(agency, showWorkflows, workflowType, status, startIndex, pageLength, fromDate, toDate, iswc, agencyWorkCodes, originatingAgency);
        }
    
        /// <summary>Update the status of an outstanding Workflow Tasks associated with an Agency</summary>
        /// <param name="agency">CISAC Agency identifier</param>
        /// <returns>Workflow Task updated</returns>
        [Microsoft.AspNetCore.Mvc.HttpPatch, Microsoft.AspNetCore.Mvc.Route("iswc/workflowTasks", Name = "updateWorkflowTask")]
        public System.Threading.Tasks.Task<Microsoft.AspNetCore.Mvc.ActionResult<System.Collections.Generic.ICollection<WorkflowTask>>> UpdateWorkflowTask([Microsoft.AspNetCore.Mvc.FromQuery] string agency, [Microsoft.AspNetCore.Mvc.FromBody] System.Collections.Generic.IEnumerable<WorkflowTaskUpdate> body)
        {
            return _implementation.UpdateWorkflowTaskAsync(agency, body);
        }
    
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NSwag", "13.1.6.0 (NJsonSchema v10.0.28.0 (Newtonsoft.Json v11.0.0.0))")]
    public interface IISWC_AgentController
    {
        /// <summary>Retrieve a list of CSN notifications associated with an Agency</summary>
        /// <param name="agency">CISAC Agency identifier</param>
        /// <param name="csnTransactionType">Type of transaction requested</param>
        /// <param name="fromDate">The date from which to retrieve notifications</param>
        /// <param name="pageLength">Number of records to return</param>
        /// <param name="continuationToken">Used to page through results</param>
        /// <returns>List of notifications</returns>
        System.Threading.Tasks.Task<Microsoft.AspNetCore.Mvc.ActionResult<AgentNotificationResponse>> GetNotificationsAsync(string agency, CsnTransactionType csnTransactionType, string fromDate, int pageLength, string continuationToken);
    
        /// <summary>Notify ISWC when an agent run starts and ends</summary>
        /// <returns>Agent run Id</returns>
        System.Threading.Tasks.Task<Microsoft.AspNetCore.Mvc.ActionResult<Response>> UpdateAgentRunAsync(AgentRun body);
    
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NSwag", "13.1.6.0 (NJsonSchema v10.0.28.0 (Newtonsoft.Json v11.0.0.0))")]
    public partial class ISWC_AgentController : SpanishPoint.Azure.Iswc.Api.Agency.Configuration.Swagger.BaseController
    {
        private IISWC_AgentController _implementation;
    
        public ISWC_AgentController(IISWC_AgentController implementation)
        {
            _implementation = implementation;
        }
    
        /// <summary>Retrieve a list of CSN notifications associated with an Agency</summary>
        /// <param name="agency">CISAC Agency identifier</param>
        /// <param name="csnTransactionType">Type of transaction requested</param>
        /// <param name="fromDate">The date from which to retrieve notifications</param>
        /// <param name="pageLength">Number of records to return</param>
        /// <param name="continuationToken">Used to page through results</param>
        /// <returns>List of notifications</returns>
        [Microsoft.AspNetCore.Mvc.HttpGet, Microsoft.AspNetCore.Mvc.Route("agent/notification", Name = "getNotifications")]
        public System.Threading.Tasks.Task<Microsoft.AspNetCore.Mvc.ActionResult<AgentNotificationResponse>> GetNotifications([Microsoft.AspNetCore.Mvc.FromQuery] string agency, [Microsoft.AspNetCore.Mvc.FromQuery] CsnTransactionType csnTransactionType, [Microsoft.AspNetCore.Mvc.FromQuery] string fromDate, [Microsoft.AspNetCore.Mvc.FromQuery] int pageLength, [Microsoft.AspNetCore.Mvc.FromQuery] string continuationToken)
        {
            return _implementation.GetNotificationsAsync(agency, csnTransactionType, fromDate, pageLength, continuationToken);
        }
    
        /// <summary>Notify ISWC when an agent run starts and ends</summary>
        /// <returns>Agent run Id</returns>
        [Microsoft.AspNetCore.Mvc.HttpPost, Microsoft.AspNetCore.Mvc.Route("agent/run", Name = "updateAgentRun")]
        public System.Threading.Tasks.Task<Microsoft.AspNetCore.Mvc.ActionResult<Response>> UpdateAgentRun([Microsoft.AspNetCore.Mvc.FromBody] AgentRun body)
        {
            return _implementation.UpdateAgentRunAsync(body);
        }
    
    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.0.28.0 (Newtonsoft.Json v11.0.0.0)")]
    public partial class ISWCMetadata : CommonSystemAttributes
    {
        [Newtonsoft.Json.JsonProperty("iswc", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Iswc { get; set; }
    
        /// <summary>Indicator of ISWC being preferred, provisional or archived</summary>
        [Newtonsoft.Json.JsonProperty("iswcStatus", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string IswcStatus { get; set; }
    
        /// <summary>A CISAC code of a submitting agency that allocated this ISWC</summary>
        [Newtonsoft.Json.JsonProperty("agency", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Agency { get; set; }
    
        /// <summary>Original title of a musical composition</summary>
        [Newtonsoft.Json.JsonProperty("originalTitle", Required = Newtonsoft.Json.Required.Always)]
        public string OriginalTitle { get; set; }
    
        /// <summary>Other titles associated with musical composition (aka alternative titles)</summary>
        [Newtonsoft.Json.JsonProperty("otherTitles", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.Generic.List<Title> OtherTitles { get; set; }
    
        /// <summary>Interested party associated with musical composition, such as :composers, lyricist, translator, original and sub publishers</summary>
        [Newtonsoft.Json.JsonProperty("interestedParties", Required = Newtonsoft.Json.Required.Always)]
        public System.Collections.Generic.List<InterestedParty> InterestedParties { get; set; } = new System.Collections.Generic.List<InterestedParty>();
    
        [Newtonsoft.Json.JsonProperty("works", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.Generic.List<VerifiedSubmission> Works { get; set; }
    
        /// <summary>A preferred ISWC of a parent of this ISWC. Presence of this field indicates that the ISWC merged to the parent.</summary>
        [Newtonsoft.Json.JsonProperty("parentISWC", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string ParentISWC { get; set; }
    
        /// <summary>All linked preferred ISWCs. Presence of this field indicates that those ISWCs merged to this ISWC.</summary>
        [Newtonsoft.Json.JsonProperty("linkedISWC", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.Generic.List<string> LinkedISWC { get; set; }
    
        /// <summary>The preferred ISWC that is at the top of the chain of ISWCs.</summary>
        [Newtonsoft.Json.JsonProperty("overallParentISWC", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string OverallParentISWC { get; set; }
    
        private System.Collections.Generic.IDictionary<string, object> _additionalProperties = new System.Collections.Generic.Dictionary<string, object>();
    
        [Newtonsoft.Json.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties; }
            set { _additionalProperties = value; }
        }
    
    
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.0.28.0 (Newtonsoft.Json v11.0.0.0)")]
    public partial class ISWCMetadataBatch 
    {
        /// <summary>A unique identifier for this request. The same identifier will be populated for the ISWC Metadata request in the response.</summary>
        [Newtonsoft.Json.JsonProperty("searchId", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int? SearchId { get; set; }
    
        [Newtonsoft.Json.JsonProperty("searchResults", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.Generic.List<ISWCMetadata> SearchResults { get; set; }
    
        [Newtonsoft.Json.JsonProperty("rejection", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public Rejection Rejection { get; set; }
    
        private System.Collections.Generic.IDictionary<string, object> _additionalProperties = new System.Collections.Generic.Dictionary<string, object>();
    
        [Newtonsoft.Json.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties; }
            set { _additionalProperties = value; }
        }
    
    
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.0.28.0 (Newtonsoft.Json v11.0.0.0)")]
    public partial class Submission : CommonSubmissionAttributes
    {
        /// <summary>The preferred ISWC</summary>
        [Newtonsoft.Json.JsonProperty("preferredIswc", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string PreferredIswc { get; set; }
    
        /// <summary>If this field is set to true, the submission will not be saved to the ISWC database if there are multiple matches. If this field is set to false or is not provided, the submission will be saved to the ISWC database.</summary>
        [Newtonsoft.Json.JsonProperty("previewDisambiguation", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public bool? PreviewDisambiguation { get; set; }
    
        /// <summary>If this field is set to true, the submission will be rejected if a submission already exists for the provided Agency Work Code.</summary>
        [Newtonsoft.Json.JsonProperty("disableAddUpdateSwitching", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public bool? DisableAddUpdateSwitching { get; set; }
    
        /// <summary>If this field is set to false, the submission will be rejected if the preferredIswc value cannot be found in the database. If this field is set to true and the preferredIswc value cannot be found in the database, a new ISWC record will be created with the value provided.</summary>
        [Newtonsoft.Json.JsonProperty("allowProvidedIswc", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public bool? AllowProvidedIswc { get; set; }
    
        /// <summary>Allow the return of limited ISWC metadata</summary>
        [Newtonsoft.Json.JsonProperty("detailLevel", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
        public SubmissionDetailLevel? DetailLevel { get; set; }
    
        private System.Collections.Generic.IDictionary<string, object> _additionalProperties = new System.Collections.Generic.Dictionary<string, object>();
    
        [Newtonsoft.Json.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties; }
            set { _additionalProperties = value; }
        }
    
    
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.0.28.0 (Newtonsoft.Json v11.0.0.0)")]
    public partial class SubmissionResponse 
    {
        [Newtonsoft.Json.JsonProperty("verifiedSubmission", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public VerifiedSubmission VerifiedSubmission { get; set; }
    
        [Newtonsoft.Json.JsonProperty("linkedIswcs", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.Generic.List<LinkedIswcs> LinkedIswcs { get; set; }
    
        [Newtonsoft.Json.JsonProperty("potentialMatches", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.Generic.List<ISWCMetadata> PotentialMatches { get; set; }
    
        [Newtonsoft.Json.JsonProperty("multipleAgencyWorkCodes", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.Generic.List<MultipleAgencyWorkCodes> MultipleAgencyWorkCodes { get; set; }
    
        [Newtonsoft.Json.JsonProperty("alternateIswcMatches", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.Generic.List<AlternateIswcMatch> AlternateIswcMatches { get; set; }
    
        private System.Collections.Generic.IDictionary<string, object> _additionalProperties = new System.Collections.Generic.Dictionary<string, object>();
    
        [Newtonsoft.Json.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties; }
            set { _additionalProperties = value; }
        }
    
    
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.0.28.0 (Newtonsoft.Json v11.0.0.0)")]
    public partial class SubmissionBatch 
    {
        /// <summary>A unique submission identifier for this request. The same identifier will be populated for the submission in the response.</summary>
        [Newtonsoft.Json.JsonProperty("submissionId", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int? SubmissionId { get; set; }
    
        [Newtonsoft.Json.JsonProperty("submission", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public Submission Submission { get; set; }
    
        [Newtonsoft.Json.JsonProperty("multipleAgencyWorkCodes", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.Generic.List<MultipleAgencyWorkCodes2> MultipleAgencyWorkCodes { get; set; }
    
        [Newtonsoft.Json.JsonProperty("rejection", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public Rejection Rejection { get; set; }
    
        private System.Collections.Generic.IDictionary<string, object> _additionalProperties = new System.Collections.Generic.Dictionary<string, object>();
    
        [Newtonsoft.Json.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties; }
            set { _additionalProperties = value; }
        }
    
    
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.0.28.0 (Newtonsoft.Json v11.0.0.0)")]
    public partial class VerifiedSubmission : CommonSubmissionAttributes
    {
        /// <summary>An unique identifier assigned by the system</summary>
        [Newtonsoft.Json.JsonProperty("id", Required = Newtonsoft.Json.Required.Always)]
        public long Id { get; set; }
    
        /// <summary>A preferred ISWC assigned by the system</summary>
        [Newtonsoft.Json.JsonProperty("iswc", Required = Newtonsoft.Json.Required.Always)]
        public object Iswc { get; set; }
    
        /// <summary>Indicator of a submitter being Iswc Eligible</summary>
        [Newtonsoft.Json.JsonProperty("iswcEligible", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public bool? IswcEligible { get; set; }
    
        /// <summary>Indicator of ISWC being preferred, provisional or archived</summary>
        [Newtonsoft.Json.JsonProperty("iswcStatus", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string IswcStatus { get; set; }
    
        /// <summary>Indicator of a submission being logically deleted on CSINET</summary>
        [Newtonsoft.Json.JsonProperty("deleted", Required = Newtonsoft.Json.Required.Always)]
        public bool Deleted { get; set; }
    
        /// <summary>The ISWC record that this is linked from</summary>
        [Newtonsoft.Json.JsonProperty("linkedFrom", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string LinkedFrom { get; set; }
    
        /// <summary>The ISWC record that this is linked to</summary>
        [Newtonsoft.Json.JsonProperty("linkedTo", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string LinkedTo { get; set; }
    
        [Newtonsoft.Json.JsonProperty("rejection", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public Rejection Rejection { get; set; }
    
        /// <summary>The Archived ISWC</summary>
        [Newtonsoft.Json.JsonProperty("archivedIswc", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string ArchivedIswc { get; set; }
    
        /// <summary>The preferred ISWC that is at the top of the chain of ISWCs.</summary>
        [Newtonsoft.Json.JsonProperty("overallParentISWC", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string OverallParentISWC { get; set; }
    
        /// <summary>Data and time of creation in the system</summary>
        [Newtonsoft.Json.JsonProperty("createdDate", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.DateTimeOffset? CreatedDate { get; set; }
    
        /// <summary>Data and time of the latest update in the system</summary>
        [Newtonsoft.Json.JsonProperty("lastModifiedDate", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.DateTimeOffset? LastModifiedDate { get; set; }
    
        /// <summary>Identifier of the last update in the system</summary>
        [Newtonsoft.Json.JsonProperty("lastModifiedBy", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string LastModifiedBy { get; set; }
    
        private System.Collections.Generic.IDictionary<string, object> _additionalProperties = new System.Collections.Generic.Dictionary<string, object>();
    
        [Newtonsoft.Json.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties; }
            set { _additionalProperties = value; }
        }
    
    
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.0.28.0 (Newtonsoft.Json v11.0.0.0)")]
    public partial class VerifiedSubmissionBatch 
    {
        /// <summary>The value of the submissionID from the request submission.</summary>
        [Newtonsoft.Json.JsonProperty("submissionId", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int? SubmissionId { get; set; }
    
        [Newtonsoft.Json.JsonProperty("submission", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public SubmissionResponse Submission { get; set; }
    
        [Newtonsoft.Json.JsonProperty("rejection", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public Rejection Rejection { get; set; }
    
        private System.Collections.Generic.IDictionary<string, object> _additionalProperties = new System.Collections.Generic.Dictionary<string, object>();
    
        [Newtonsoft.Json.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties; }
            set { _additionalProperties = value; }
        }
    
    
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.0.28.0 (Newtonsoft.Json v11.0.0.0)")]
    public partial class AlternateIswcMatch : CommonISWCMetadata
    {
        private System.Collections.Generic.IDictionary<string, object> _additionalProperties = new System.Collections.Generic.Dictionary<string, object>();
    
        [Newtonsoft.Json.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties; }
            set { _additionalProperties = value; }
        }
    
    
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.0.28.0 (Newtonsoft.Json v11.0.0.0)")]
    public partial class CommonSubmissionAttributes : CommonISWCMetadata
    {
        [Newtonsoft.Json.JsonProperty("agency", Required = Newtonsoft.Json.Required.Always)]
        public string Agency { get; set; }
    
        [Newtonsoft.Json.JsonProperty("sourcedb", Required = Newtonsoft.Json.Required.Always)]
        public int Sourcedb { get; set; }
    
        [Newtonsoft.Json.JsonProperty("workcode", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Workcode { get; set; }
    
        [Newtonsoft.Json.JsonProperty("category", Required = Newtonsoft.Json.Required.Always)]
        [Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
        public CommonSubmissionAttributesCategory Category { get; set; }
    
        [Newtonsoft.Json.JsonProperty("disambiguation", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public bool? Disambiguation { get; set; }
    
        [Newtonsoft.Json.JsonProperty("disambiguationReason", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
        public DisambiguationReason? DisambiguationReason { get; set; }
    
        [Newtonsoft.Json.JsonProperty("disambiguateFrom", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.Generic.List<DisambiguateFrom> DisambiguateFrom { get; set; }
    
        [Newtonsoft.Json.JsonProperty("bvltr", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
        public BVLTR? Bvltr { get; set; }
    
        [Newtonsoft.Json.JsonProperty("derivedWorkType", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
        public DerivedWorkType? DerivedWorkType { get; set; }
    
        [Newtonsoft.Json.JsonProperty("derivedFromIswcs", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.Generic.List<DerivedFrom> DerivedFromIswcs { get; set; }
    
        [Newtonsoft.Json.JsonProperty("performers", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.Generic.List<Performer> Performers { get; set; }
    
        [Newtonsoft.Json.JsonProperty("instrumentation", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.Generic.List<Instrumentation> Instrumentation { get; set; }
    
        /// <summary>Date and time when this metadata was created on CISNET</summary>
        [Newtonsoft.Json.JsonProperty("cisnetCreatedDate", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.DateTimeOffset? CisnetCreatedDate { get; set; }
    
        /// <summary>Date and time when this metadata last modified on CISNET</summary>
        [Newtonsoft.Json.JsonProperty("cisnetLastModifiedDate", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.DateTimeOffset? CisnetLastModifiedDate { get; set; }
    
        /// <summary>Optional list of additional identifiers that can be supplied with the submission.</summary>
        [Newtonsoft.Json.JsonProperty("additionalIdentifiers", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public AdditionalIdentifiers AdditionalIdentifiers { get; set; }
    
        private System.Collections.Generic.IDictionary<string, object> _additionalProperties = new System.Collections.Generic.Dictionary<string, object>();
    
        [Newtonsoft.Json.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties; }
            set { _additionalProperties = value; }
        }
    
    
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.0.28.0 (Newtonsoft.Json v11.0.0.0)")]
    public partial class CommonISWCMetadata 
    {
        [Newtonsoft.Json.JsonProperty("iswc", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Iswc { get; set; }
    
        /// <summary>Indicator of ISWC being preferred, provisional or archived</summary>
        [Newtonsoft.Json.JsonProperty("iswcStatus", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string IswcStatus { get; set; }
    
        /// <summary>A CISAC code of a submitting agency that allocated this ISWC</summary>
        [Newtonsoft.Json.JsonProperty("agency", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Agency { get; set; }
    
        /// <summary>Original title of a musical composition</summary>
        [Newtonsoft.Json.JsonProperty("originalTitle", Required = Newtonsoft.Json.Required.Always)]
        public string OriginalTitle { get; set; }
    
        /// <summary>Other titles associated with musical composition (aka alternative titles)</summary>
        [Newtonsoft.Json.JsonProperty("otherTitles", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.Generic.List<Title> OtherTitles { get; set; }
    
        /// <summary>Interested party associated with musical composition, such as :composers, lyricist, translator, original and sub publishers</summary>
        [Newtonsoft.Json.JsonProperty("interestedParties", Required = Newtonsoft.Json.Required.Always)]
        public System.Collections.Generic.List<InterestedParty> InterestedParties { get; set; } = new System.Collections.Generic.List<InterestedParty>();
    
        private System.Collections.Generic.IDictionary<string, object> _additionalProperties = new System.Collections.Generic.Dictionary<string, object>();
    
        [Newtonsoft.Json.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties; }
            set { _additionalProperties = value; }
        }
    
    
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.0.28.0 (Newtonsoft.Json v11.0.0.0)")]
    public partial class CommonSystemAttributes 
    {
        /// <summary>Data and time of creation in the system</summary>
        [Newtonsoft.Json.JsonProperty("createdDate", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.DateTimeOffset? CreatedDate { get; set; }
    
        /// <summary>Data and time of the latest update in the system</summary>
        [Newtonsoft.Json.JsonProperty("lastModifiedDate", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.DateTimeOffset? LastModifiedDate { get; set; }
    
        /// <summary>Identifier of the last update in the system</summary>
        [Newtonsoft.Json.JsonProperty("lastModifiedBy", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string LastModifiedBy { get; set; }
    
        private System.Collections.Generic.IDictionary<string, object> _additionalProperties = new System.Collections.Generic.Dictionary<string, object>();
    
        [Newtonsoft.Json.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties; }
            set { _additionalProperties = value; }
        }
    
    
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.0.28.0 (Newtonsoft.Json v11.0.0.0)")]
    public partial class Rejection 
    {
        [Newtonsoft.Json.JsonProperty("code", Required = Newtonsoft.Json.Required.Always)]
        public string Code { get; set; }
    
        [Newtonsoft.Json.JsonProperty("message", Required = Newtonsoft.Json.Required.Always)]
        public string Message { get; set; }
    
        private System.Collections.Generic.IDictionary<string, object> _additionalProperties = new System.Collections.Generic.Dictionary<string, object>();
    
        [Newtonsoft.Json.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties; }
            set { _additionalProperties = value; }
        }
    
    
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.0.28.0 (Newtonsoft.Json v11.0.0.0)")]
    public partial class Title 
    {
        /// <summary>Musical work title</summary>
        [Newtonsoft.Json.JsonProperty("title", Required = Newtonsoft.Json.Required.Always)]
        public string Title1 { get; set; }
    
        /// <summary>Musical work title type</summary>
        [Newtonsoft.Json.JsonProperty("type", Required = Newtonsoft.Json.Required.Always)]
        [Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
        public TitleType Type { get; set; }
    
        private System.Collections.Generic.IDictionary<string, object> _additionalProperties = new System.Collections.Generic.Dictionary<string, object>();
    
        [Newtonsoft.Json.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties; }
            set { _additionalProperties = value; }
        }
    
    
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.0.28.0 (Newtonsoft.Json v11.0.0.0)")]
    public partial class InterestedParty 
    {
        [Newtonsoft.Json.JsonProperty("name", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Name { get; set; }
    
        [Newtonsoft.Json.JsonProperty("lastName", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string LastName { get; set; }
    
        [Newtonsoft.Json.JsonProperty("displayName", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string DisplayName { get; set; }
    
        [Newtonsoft.Json.JsonProperty("nameNumber", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public long? NameNumber { get; set; }
    
        [Newtonsoft.Json.JsonProperty("baseNumber", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string BaseNumber { get; set; }
    
        [Newtonsoft.Json.JsonProperty("affiliation", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Affiliation { get; set; }
    
        /// <summary>The role will be rolled up to the corresponding CISAC Role as per the following mapping: C(C,A,CA), MA(AR,SR), TA(AD,SA,TR) E(E,AM)</summary>
        [Newtonsoft.Json.JsonProperty("role", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
        public InterestedPartyRole? Role { get; set; }
    
        [Newtonsoft.Json.JsonProperty("legalEntityType", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
        public InterestedPartyLegalEntityType? LegalEntityType { get; set; }
    
        private System.Collections.Generic.IDictionary<string, object> _additionalProperties = new System.Collections.Generic.Dictionary<string, object>();
    
        [Newtonsoft.Json.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties; }
            set { _additionalProperties = value; }
        }
    
    
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.0.28.0 (Newtonsoft.Json v11.0.0.0)")]
    public partial class Performer 
    {
        [Newtonsoft.Json.JsonProperty("isni", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Isni { get; set; }
    
        [Newtonsoft.Json.JsonProperty("ipn", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public long? Ipn { get; set; }
    
        [Newtonsoft.Json.JsonProperty("firstName", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string FirstName { get; set; }
    
        [Newtonsoft.Json.JsonProperty("lastName", Required = Newtonsoft.Json.Required.Always)]
        public string LastName { get; set; }
    
        [Newtonsoft.Json.JsonProperty("designation", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
        public PerformerDesignation? Designation { get; set; }
    
        private System.Collections.Generic.IDictionary<string, object> _additionalProperties = new System.Collections.Generic.Dictionary<string, object>();
    
        [Newtonsoft.Json.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties; }
            set { _additionalProperties = value; }
        }
    
    
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.0.28.0 (Newtonsoft.Json v11.0.0.0)")]
    public partial class Instrumentation 
    {
        [Newtonsoft.Json.JsonProperty("code", Required = Newtonsoft.Json.Required.Always)]
        public string Code { get; set; }
    
        private System.Collections.Generic.IDictionary<string, object> _additionalProperties = new System.Collections.Generic.Dictionary<string, object>();
    
        [Newtonsoft.Json.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties; }
            set { _additionalProperties = value; }
        }
    
    
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.0.28.0 (Newtonsoft.Json v11.0.0.0)")]
    public partial class DerivedFrom 
    {
        [Newtonsoft.Json.JsonProperty("iswc", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Iswc { get; set; }
    
        [Newtonsoft.Json.JsonProperty("title", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Title { get; set; }
    
        private System.Collections.Generic.IDictionary<string, object> _additionalProperties = new System.Collections.Generic.Dictionary<string, object>();
    
        [Newtonsoft.Json.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties; }
            set { _additionalProperties = value; }
        }
    
    
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.0.28.0 (Newtonsoft.Json v11.0.0.0)")]
    public partial class DisambiguateFrom 
    {
        [Newtonsoft.Json.JsonProperty("iswc", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Iswc { get; set; }
    
        private System.Collections.Generic.IDictionary<string, object> _additionalProperties = new System.Collections.Generic.Dictionary<string, object>();
    
        [Newtonsoft.Json.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties; }
            set { _additionalProperties = value; }
        }
    
    
    }
    
    /// <summary>Disambiguation Reason Code</summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.0.28.0 (Newtonsoft.Json v11.0.0.0)")]
    public enum DisambiguationReason
    {
        [System.Runtime.Serialization.EnumMember(Value = @"DIT")]
        DIT = 0,
    
        [System.Runtime.Serialization.EnumMember(Value = @"DIA")]
        DIA = 1,
    
        [System.Runtime.Serialization.EnumMember(Value = @"DIE")]
        DIE = 2,
    
        [System.Runtime.Serialization.EnumMember(Value = @"DIC")]
        DIC = 3,
    
        [System.Runtime.Serialization.EnumMember(Value = @"DIP")]
        DIP = 4,
    
        [System.Runtime.Serialization.EnumMember(Value = @"DIV")]
        DIV = 5,
    
    }
    
    /// <summary>Background, Logo, Theme, Visual or Rolled Up Cue</summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.0.28.0 (Newtonsoft.Json v11.0.0.0)")]
    public enum BVLTR
    {
        [System.Runtime.Serialization.EnumMember(Value = @"Background")]
        Background = 0,
    
        [System.Runtime.Serialization.EnumMember(Value = @"Logo")]
        Logo = 1,
    
        [System.Runtime.Serialization.EnumMember(Value = @"Theme")]
        Theme = 2,
    
        [System.Runtime.Serialization.EnumMember(Value = @"Visual")]
        Visual = 3,
    
        [System.Runtime.Serialization.EnumMember(Value = @"RolledUpCue")]
        RolledUpCue = 4,
    
    }
    
    /// <summary>Derived Work Type- if not provided then this isn't a derived work</summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.0.28.0 (Newtonsoft.Json v11.0.0.0)")]
    public enum DerivedWorkType
    {
        [System.Runtime.Serialization.EnumMember(Value = @"ModifiedVersion")]
        ModifiedVersion = 0,
    
        [System.Runtime.Serialization.EnumMember(Value = @"Excerpt")]
        Excerpt = 1,
    
        [System.Runtime.Serialization.EnumMember(Value = @"Composite")]
        Composite = 2,
    
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.0.28.0 (Newtonsoft.Json v11.0.0.0)")]
    public partial class IswcSearchModel 
    {
        /// <summary>The preferred ISWC</summary>
        [Newtonsoft.Json.JsonProperty("iswc", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Iswc { get; set; }
    
        private System.Collections.Generic.IDictionary<string, object> _additionalProperties = new System.Collections.Generic.Dictionary<string, object>();
    
        [Newtonsoft.Json.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties; }
            set { _additionalProperties = value; }
        }
    
    
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.0.28.0 (Newtonsoft.Json v11.0.0.0)")]
    public partial class AgencyWorkCodeSearchModel 
    {
        /// <summary>The Agency of the ISWC submission</summary>
        [Newtonsoft.Json.JsonProperty("agency", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Agency { get; set; }
    
        /// <summary>The Agency WorkCode of the ISWC submission</summary>
        [Newtonsoft.Json.JsonProperty("workCode", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string WorkCode { get; set; }
    
        private System.Collections.Generic.IDictionary<string, object> _additionalProperties = new System.Collections.Generic.Dictionary<string, object>();
    
        [Newtonsoft.Json.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties; }
            set { _additionalProperties = value; }
        }
    
    
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.0.28.0 (Newtonsoft.Json v11.0.0.0)")]
    public partial class TitleAndContributorSearchModel 
    {
        [Newtonsoft.Json.JsonProperty("titles", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.Generic.List<Title> Titles { get; set; }
    
        [Newtonsoft.Json.JsonProperty("interestedParties", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.Generic.List<InterestedParty> InterestedParties { get; set; }
    
        private System.Collections.Generic.IDictionary<string, object> _additionalProperties = new System.Collections.Generic.Dictionary<string, object>();
    
        [Newtonsoft.Json.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties; }
            set { _additionalProperties = value; }
        }
    
    
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.0.28.0 (Newtonsoft.Json v11.0.0.0)")]
    public partial class UPSearchModel 
    {
        [Newtonsoft.Json.JsonProperty("titles", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.Generic.List<Title> Titles { get; set; }
    
        [Newtonsoft.Json.JsonProperty("interestedParties", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.Generic.List<InterestedParty> InterestedParties { get; set; }
    
        [Newtonsoft.Json.JsonProperty("performers", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.Generic.List<Performer> Performers { get; set; }
    
        private System.Collections.Generic.IDictionary<string, object> _additionalProperties = new System.Collections.Generic.Dictionary<string, object>();
    
        [Newtonsoft.Json.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties; }
            set { _additionalProperties = value; }
        }
    
    
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.0.28.0 (Newtonsoft.Json v11.0.0.0)")]
    public partial class WorkNumber 
    {
        [Newtonsoft.Json.JsonProperty("agencyCode", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string AgencyCode { get; set; }
    
        [Newtonsoft.Json.JsonProperty("agencyWorkCode", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string AgencyWorkCode { get; set; }
    
        private System.Collections.Generic.IDictionary<string, object> _additionalProperties = new System.Collections.Generic.Dictionary<string, object>();
    
        [Newtonsoft.Json.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties; }
            set { _additionalProperties = value; }
        }
    
    
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.0.28.0 (Newtonsoft.Json v11.0.0.0)")]
    public partial class WorkflowTask 
    {
        [Newtonsoft.Json.JsonProperty("workflowTaskId", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int? WorkflowTaskId { get; set; }
    
        [Newtonsoft.Json.JsonProperty("workflowType", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
        public WorkflowTaskWorkflowType? WorkflowType { get; set; }
    
        [Newtonsoft.Json.JsonProperty("status", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
        public WorkflowTaskStatus? Status { get; set; }
    
        [Newtonsoft.Json.JsonProperty("createdDate", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.DateTimeOffset? CreatedDate { get; set; }
    
        [Newtonsoft.Json.JsonProperty("originatingSociety", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string OriginatingSociety { get; set; }
    
        [Newtonsoft.Json.JsonProperty("assignedSociety", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string AssignedSociety { get; set; }
    
        [Newtonsoft.Json.JsonProperty("iswcMetadata", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public ISWCMetadata IswcMetadata { get; set; }
    
        [Newtonsoft.Json.JsonProperty("rejection", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public Rejection Rejection { get; set; }
    
        /// <summary>The reason for the workflow update</summary>
        [Newtonsoft.Json.JsonProperty("workflowMessage", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string WorkflowMessage { get; set; }
    
        private System.Collections.Generic.IDictionary<string, object> _additionalProperties = new System.Collections.Generic.Dictionary<string, object>();
    
        [Newtonsoft.Json.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties; }
            set { _additionalProperties = value; }
        }
    
    
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.0.28.0 (Newtonsoft.Json v11.0.0.0)")]
    public partial class WorkflowTaskUpdate 
    {
        [Newtonsoft.Json.JsonProperty("taskId", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int? TaskId { get; set; }
    
        [Newtonsoft.Json.JsonProperty("workflowType", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
        public WorkflowTaskUpdateWorkflowType? WorkflowType { get; set; }
    
        [Newtonsoft.Json.JsonProperty("status", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
        public WorkflowTaskUpdateStatus? Status { get; set; }
    
        /// <summary>The reason for the workflow update</summary>
        [Newtonsoft.Json.JsonProperty("workflowMessage", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string WorkflowMessage { get; set; }
    
        private System.Collections.Generic.IDictionary<string, object> _additionalProperties = new System.Collections.Generic.Dictionary<string, object>();
    
        [Newtonsoft.Json.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties; }
            set { _additionalProperties = value; }
        }
    
    
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.0.28.0 (Newtonsoft.Json v11.0.0.0)")]
    public partial class AgentNotificationResponse 
    {
        [Newtonsoft.Json.JsonProperty("notifications", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.Generic.List<CsnNotification> Notifications { get; set; }
    
        [Newtonsoft.Json.JsonProperty("continuationToken", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string ContinuationToken { get; set; }
    
        private System.Collections.Generic.IDictionary<string, object> _additionalProperties = new System.Collections.Generic.Dictionary<string, object>();
    
        [Newtonsoft.Json.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties; }
            set { _additionalProperties = value; }
        }
    
    
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.0.28.0 (Newtonsoft.Json v11.0.0.0)")]
    public partial class CsnNotification 
    {
        [Newtonsoft.Json.JsonProperty("submittingAgencyCode", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string SubmittingAgencyCode { get; set; }
    
        [Newtonsoft.Json.JsonProperty("receivingAgencyCode", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string ReceivingAgencyCode { get; set; }
    
        [Newtonsoft.Json.JsonProperty("toIswc", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string ToIswc { get; set; }
    
        [Newtonsoft.Json.JsonProperty("fromIswc", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string FromIswc { get; set; }
    
        [Newtonsoft.Json.JsonProperty("processingDate", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.DateTimeOffset? ProcessingDate { get; set; }
    
        [Newtonsoft.Json.JsonProperty("csnTransactionType", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
        public CsnNotificationCsnTransactionType? CsnTransactionType { get; set; }
    
        [Newtonsoft.Json.JsonProperty("workflowTaskId", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string WorkflowTaskId { get; set; }
    
        [Newtonsoft.Json.JsonProperty("workflowStatus", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
        public CsnNotificationWorkflowStatus? WorkflowStatus { get; set; }
    
        [Newtonsoft.Json.JsonProperty("receivingAgencyWorkCode", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string ReceivingAgencyWorkCode { get; set; }
    
        [Newtonsoft.Json.JsonProperty("processedOnDate", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.DateTimeOffset? ProcessedOnDate { get; set; }
    
        [Newtonsoft.Json.JsonProperty("iswcMetadata", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public ISWCMetadata IswcMetadata { get; set; }
    
        [Newtonsoft.Json.JsonProperty("workflowMessage", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string WorkflowMessage { get; set; }
    
        private System.Collections.Generic.IDictionary<string, object> _additionalProperties = new System.Collections.Generic.Dictionary<string, object>();
    
        [Newtonsoft.Json.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties; }
            set { _additionalProperties = value; }
        }
    
    
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.0.28.0 (Newtonsoft.Json v11.0.0.0)")]
    public partial class AgentRun 
    {
        [Newtonsoft.Json.JsonProperty("agentVersion", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string AgentVersion { get; set; }
    
        [Newtonsoft.Json.JsonProperty("agencyCode", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string AgencyCode { get; set; }
    
        [Newtonsoft.Json.JsonProperty("runId", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string RunId { get; set; }
    
        [Newtonsoft.Json.JsonProperty("updateRecordCount", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int? UpdateRecordCount { get; set; }
    
        [Newtonsoft.Json.JsonProperty("newRecordCount", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int? NewRecordCount { get; set; }
    
        [Newtonsoft.Json.JsonProperty("overallRejected", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int? OverallRejected { get; set; }
    
        [Newtonsoft.Json.JsonProperty("overallSent", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int? OverallSent { get; set; }
    
        [Newtonsoft.Json.JsonProperty("successfulCount", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int? SuccessfulCount { get; set; }
    
        [Newtonsoft.Json.JsonProperty("businessRejectionCount", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int? BusinessRejectionCount { get; set; }
    
        [Newtonsoft.Json.JsonProperty("technicalRejectionCount", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int? TechnicalRejectionCount { get; set; }
    
        private System.Collections.Generic.IDictionary<string, object> _additionalProperties = new System.Collections.Generic.Dictionary<string, object>();
    
        [Newtonsoft.Json.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties; }
            set { _additionalProperties = value; }
        }
    
    
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.0.28.0 (Newtonsoft.Json v11.0.0.0)")]
    public enum DetailLevel
    {
        [System.Runtime.Serialization.EnumMember(Value = @"full")]
        Full = 0,
    
        [System.Runtime.Serialization.EnumMember(Value = @"minimal")]
        Minimal = 1,
    
        [System.Runtime.Serialization.EnumMember(Value = @"coreAndLinks")]
        CoreAndLinks = 2,
    
        [System.Runtime.Serialization.EnumMember(Value = @"core")]
        Core = 3,
    
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.0.28.0 (Newtonsoft.Json v11.0.0.0)")]
    public partial class Body 
    {
        [Newtonsoft.Json.JsonProperty("iswcs", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.Generic.List<string> Iswcs { get; set; }
    
        [Newtonsoft.Json.JsonProperty("agencyWorks", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.Generic.List<WorkNumber> AgencyWorks { get; set; }
    
        private System.Collections.Generic.IDictionary<string, object> _additionalProperties = new System.Collections.Generic.Dictionary<string, object>();
    
        [Newtonsoft.Json.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties; }
            set { _additionalProperties = value; }
        }
    
    
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.0.28.0 (Newtonsoft.Json v11.0.0.0)")]
    public enum ShowWorkflows
    {
        [System.Runtime.Serialization.EnumMember(Value = @"AssignedToMe")]
        AssignedToMe = 0,
    
        [System.Runtime.Serialization.EnumMember(Value = @"CreatedByMe")]
        CreatedByMe = 1,
    
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.0.28.0 (Newtonsoft.Json v11.0.0.0)")]
    public enum WorkflowType
    {
        [System.Runtime.Serialization.EnumMember(Value = @"UpdateApproval")]
        UpdateApproval = 0,
    
        [System.Runtime.Serialization.EnumMember(Value = @"MergeApproval")]
        MergeApproval = 1,
    
        [System.Runtime.Serialization.EnumMember(Value = @"DemergeApproval")]
        DemergeApproval = 2,
    
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.0.28.0 (Newtonsoft.Json v11.0.0.0)")]
    public enum WorkflowStatus
    {
        [System.Runtime.Serialization.EnumMember(Value = @"Outstanding")]
        Outstanding = 0,
    
        [System.Runtime.Serialization.EnumMember(Value = @"Approved")]
        Approved = 1,
    
        [System.Runtime.Serialization.EnumMember(Value = @"Rejected")]
        Rejected = 2,
    
        [System.Runtime.Serialization.EnumMember(Value = @"Cancelled")]
        Cancelled = 3,
    
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.0.28.0 (Newtonsoft.Json v11.0.0.0)")]
    public enum CsnTransactionType
    {
        [System.Runtime.Serialization.EnumMember(Value = @"MER")]
        MER = 0,
    
        [System.Runtime.Serialization.EnumMember(Value = @"DMR")]
        DMR = 1,
    
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.0.28.0 (Newtonsoft.Json v11.0.0.0)")]
    public partial class Response 
    {
        [Newtonsoft.Json.JsonProperty("runId", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string RunId { get; set; }
    
        private System.Collections.Generic.IDictionary<string, object> _additionalProperties = new System.Collections.Generic.Dictionary<string, object>();
    
        [Newtonsoft.Json.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties; }
            set { _additionalProperties = value; }
        }
    
    
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.0.28.0 (Newtonsoft.Json v11.0.0.0)")]
    public enum SubmissionDetailLevel
    {
        [System.Runtime.Serialization.EnumMember(Value = @"full")]
        Full = 0,
    
        [System.Runtime.Serialization.EnumMember(Value = @"core")]
        Core = 1,
    
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.0.28.0 (Newtonsoft.Json v11.0.0.0)")]
    public partial class LinkedIswcs 
    {
        [Newtonsoft.Json.JsonProperty("linkedReason", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int? LinkedReason { get; set; }
    
        [Newtonsoft.Json.JsonProperty("iswcMetadata", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public ISWCMetadata IswcMetadata { get; set; }
    
        private System.Collections.Generic.IDictionary<string, object> _additionalProperties = new System.Collections.Generic.Dictionary<string, object>();
    
        [Newtonsoft.Json.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties; }
            set { _additionalProperties = value; }
        }
    
    
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.0.28.0 (Newtonsoft.Json v11.0.0.0)")]
    public partial class MultipleAgencyWorkCodes 
    {
        [Newtonsoft.Json.JsonProperty("agency", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Agency { get; set; }
    
        [Newtonsoft.Json.JsonProperty("workCode", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string WorkCode { get; set; }
    
        [Newtonsoft.Json.JsonProperty("rejection", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public Rejection Rejection { get; set; }
    
        private System.Collections.Generic.IDictionary<string, object> _additionalProperties = new System.Collections.Generic.Dictionary<string, object>();
    
        [Newtonsoft.Json.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties; }
            set { _additionalProperties = value; }
        }
    
    
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.0.28.0 (Newtonsoft.Json v11.0.0.0)")]
    public partial class MultipleAgencyWorkCodes2 
    {
        [Newtonsoft.Json.JsonProperty("agency", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Agency { get; set; }
    
        [Newtonsoft.Json.JsonProperty("workCode", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string WorkCode { get; set; }
    
        private System.Collections.Generic.IDictionary<string, object> _additionalProperties = new System.Collections.Generic.Dictionary<string, object>();
    
        [Newtonsoft.Json.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties; }
            set { _additionalProperties = value; }
        }
    
    
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.0.28.0 (Newtonsoft.Json v11.0.0.0)")]
    public enum CommonSubmissionAttributesCategory
    {
        [System.Runtime.Serialization.EnumMember(Value = @"DOM")]
        DOM = 0,
    
        [System.Runtime.Serialization.EnumMember(Value = @"INT")]
        INT = 1,
    
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.0.28.0 (Newtonsoft.Json v11.0.0.0)")]
    public partial class AdditionalIdentifiers 
    {
        [Newtonsoft.Json.JsonProperty("isrcs", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.Generic.List<string> Isrcs { get; set; }
    
        [Newtonsoft.Json.JsonProperty("publisherIdentifiers", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.Generic.List<PublisherIdentifiers> PublisherIdentifiers { get; set; }
    
        [Newtonsoft.Json.JsonProperty("agencyWorkCodes", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.Generic.List<AgencyWorkCodes> AgencyWorkCodes { get; set; }
    
        [Newtonsoft.Json.JsonProperty("labelIdentifiers", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.Generic.List<LabelIdentifiers> LabelIdentifiers { get; set; }
    
        [Newtonsoft.Json.JsonProperty("recordings", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.Generic.List<Recordings> Recordings { get; set; }
    
        private System.Collections.Generic.IDictionary<string, object> _additionalProperties = new System.Collections.Generic.Dictionary<string, object>();
    
        [Newtonsoft.Json.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties; }
            set { _additionalProperties = value; }
        }
    
    
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.0.28.0 (Newtonsoft.Json v11.0.0.0)")]
    public enum TitleType
    {
        [System.Runtime.Serialization.EnumMember(Value = @"CT")]
        CT = 0,
    
        [System.Runtime.Serialization.EnumMember(Value = @"OT")]
        OT = 1,
    
        [System.Runtime.Serialization.EnumMember(Value = @"RT")]
        RT = 2,
    
        [System.Runtime.Serialization.EnumMember(Value = @"AT")]
        AT = 3,
    
        [System.Runtime.Serialization.EnumMember(Value = @"ET")]
        ET = 4,
    
        [System.Runtime.Serialization.EnumMember(Value = @"ST")]
        ST = 5,
    
        [System.Runtime.Serialization.EnumMember(Value = @"TO")]
        TO = 6,
    
        [System.Runtime.Serialization.EnumMember(Value = @"OA")]
        OA = 7,
    
        [System.Runtime.Serialization.EnumMember(Value = @"TE")]
        TE = 8,
    
        [System.Runtime.Serialization.EnumMember(Value = @"FT")]
        FT = 9,
    
        [System.Runtime.Serialization.EnumMember(Value = @"IT")]
        IT = 10,
    
        [System.Runtime.Serialization.EnumMember(Value = @"TT")]
        TT = 11,
    
        [System.Runtime.Serialization.EnumMember(Value = @"PT")]
        PT = 12,
    
        [System.Runtime.Serialization.EnumMember(Value = @"OL")]
        OL = 13,
    
        [System.Runtime.Serialization.EnumMember(Value = @"AL")]
        AL = 14,
    
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.0.28.0 (Newtonsoft.Json v11.0.0.0)")]
    public enum InterestedPartyRole
    {
        [System.Runtime.Serialization.EnumMember(Value = @"CA")]
        CA = 0,
    
        [System.Runtime.Serialization.EnumMember(Value = @"AR")]
        AR = 1,
    
        [System.Runtime.Serialization.EnumMember(Value = @"SE")]
        SE = 2,
    
        [System.Runtime.Serialization.EnumMember(Value = @"PA")]
        PA = 3,
    
        [System.Runtime.Serialization.EnumMember(Value = @"ES")]
        ES = 4,
    
        [System.Runtime.Serialization.EnumMember(Value = @"AM")]
        AM = 5,
    
        [System.Runtime.Serialization.EnumMember(Value = @"SA")]
        SA = 6,
    
        [System.Runtime.Serialization.EnumMember(Value = @"C")]
        C = 7,
    
        [System.Runtime.Serialization.EnumMember(Value = @"AD")]
        AD = 8,
    
        [System.Runtime.Serialization.EnumMember(Value = @"A")]
        A = 9,
    
        [System.Runtime.Serialization.EnumMember(Value = @"E")]
        E = 10,
    
        [System.Runtime.Serialization.EnumMember(Value = @"AQ")]
        AQ = 11,
    
        [System.Runtime.Serialization.EnumMember(Value = @"SR")]
        SR = 12,
    
        [System.Runtime.Serialization.EnumMember(Value = @"TR")]
        TR = 13,
    
        [System.Runtime.Serialization.EnumMember(Value = @"MA")]
        MA = 14,
    
        [System.Runtime.Serialization.EnumMember(Value = @"TA")]
        TA = 15,
    
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.0.28.0 (Newtonsoft.Json v11.0.0.0)")]
    public enum InterestedPartyLegalEntityType
    {
        [System.Runtime.Serialization.EnumMember(Value = @"N")]
        N = 0,
    
        [System.Runtime.Serialization.EnumMember(Value = @"L")]
        L = 1,
    
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.0.28.0 (Newtonsoft.Json v11.0.0.0)")]
    public enum PerformerDesignation
    {
        [System.Runtime.Serialization.EnumMember(Value = @"Main Artist")]
        Main_Artist = 0,
    
        [System.Runtime.Serialization.EnumMember(Value = @"Other")]
        Other = 1,
    
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.0.28.0 (Newtonsoft.Json v11.0.0.0)")]
    public enum WorkflowTaskWorkflowType
    {
        [System.Runtime.Serialization.EnumMember(Value = @"UpdateApproval")]
        UpdateApproval = 0,
    
        [System.Runtime.Serialization.EnumMember(Value = @"MergeApproval")]
        MergeApproval = 1,
    
        [System.Runtime.Serialization.EnumMember(Value = @"DemergeApproval")]
        DemergeApproval = 2,
    
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.0.28.0 (Newtonsoft.Json v11.0.0.0)")]
    public enum WorkflowTaskStatus
    {
        [System.Runtime.Serialization.EnumMember(Value = @"Outstanding")]
        Outstanding = 0,
    
        [System.Runtime.Serialization.EnumMember(Value = @"Approved")]
        Approved = 1,
    
        [System.Runtime.Serialization.EnumMember(Value = @"Rejected")]
        Rejected = 2,
    
        [System.Runtime.Serialization.EnumMember(Value = @"Cancelled")]
        Cancelled = 3,
    
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.0.28.0 (Newtonsoft.Json v11.0.0.0)")]
    public enum WorkflowTaskUpdateWorkflowType
    {
        [System.Runtime.Serialization.EnumMember(Value = @"UpdateApproval")]
        UpdateApproval = 0,
    
        [System.Runtime.Serialization.EnumMember(Value = @"MergeApproval")]
        MergeApproval = 1,
    
        [System.Runtime.Serialization.EnumMember(Value = @"DemergeApproval")]
        DemergeApproval = 2,
    
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.0.28.0 (Newtonsoft.Json v11.0.0.0)")]
    public enum WorkflowTaskUpdateStatus
    {
        [System.Runtime.Serialization.EnumMember(Value = @"Outstanding")]
        Outstanding = 0,
    
        [System.Runtime.Serialization.EnumMember(Value = @"Approved")]
        Approved = 1,
    
        [System.Runtime.Serialization.EnumMember(Value = @"Rejected")]
        Rejected = 2,
    
        [System.Runtime.Serialization.EnumMember(Value = @"Cancelled")]
        Cancelled = 3,
    
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.0.28.0 (Newtonsoft.Json v11.0.0.0)")]
    public enum CsnNotificationCsnTransactionType
    {
        [System.Runtime.Serialization.EnumMember(Value = @"MER")]
        MER = 0,
    
        [System.Runtime.Serialization.EnumMember(Value = @"DMR")]
        DMR = 1,
    
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.0.28.0 (Newtonsoft.Json v11.0.0.0)")]
    public enum CsnNotificationWorkflowStatus
    {
        [System.Runtime.Serialization.EnumMember(Value = @"Outstanding")]
        Outstanding = 0,
    
        [System.Runtime.Serialization.EnumMember(Value = @"Approved")]
        Approved = 1,
    
        [System.Runtime.Serialization.EnumMember(Value = @"Rejected")]
        Rejected = 2,
    
        [System.Runtime.Serialization.EnumMember(Value = @"Cancelled")]
        Cancelled = 3,
    
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.0.28.0 (Newtonsoft.Json v11.0.0.0)")]
    public partial class PublisherIdentifiers 
    {
        [Newtonsoft.Json.JsonProperty("nameNumber", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public long? NameNumber { get; set; }
    
        [Newtonsoft.Json.JsonProperty("submitterCode", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string SubmitterCode { get; set; }
    
        [Newtonsoft.Json.JsonProperty("workCode", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.Generic.List<string> WorkCode { get; set; }
    
        private System.Collections.Generic.IDictionary<string, object> _additionalProperties = new System.Collections.Generic.Dictionary<string, object>();
    
        [Newtonsoft.Json.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties; }
            set { _additionalProperties = value; }
        }
    
    
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.0.28.0 (Newtonsoft.Json v11.0.0.0)")]
    public partial class AgencyWorkCodes 
    {
        [Newtonsoft.Json.JsonProperty("agency", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Agency { get; set; }
    
        [Newtonsoft.Json.JsonProperty("workCode", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string WorkCode { get; set; }
    
        private System.Collections.Generic.IDictionary<string, object> _additionalProperties = new System.Collections.Generic.Dictionary<string, object>();
    
        [Newtonsoft.Json.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties; }
            set { _additionalProperties = value; }
        }
    
    
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.0.28.0 (Newtonsoft.Json v11.0.0.0)")]
    public partial class LabelIdentifiers 
    {
        [Newtonsoft.Json.JsonProperty("submitterDPID", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string SubmitterDPID { get; set; }
    
        [Newtonsoft.Json.JsonProperty("workCode", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.Generic.List<string> WorkCode { get; set; }
    
        private System.Collections.Generic.IDictionary<string, object> _additionalProperties = new System.Collections.Generic.Dictionary<string, object>();
    
        [Newtonsoft.Json.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties; }
            set { _additionalProperties = value; }
        }
    
    
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.0.28.0 (Newtonsoft.Json v11.0.0.0)")]
    public partial class Recordings 
    {
        [Newtonsoft.Json.JsonProperty("isrc", Required = Newtonsoft.Json.Required.Always)]
        public string Isrc { get; set; }
    
        [Newtonsoft.Json.JsonProperty("recordingTitle", Required = Newtonsoft.Json.Required.Always)]
        public string RecordingTitle { get; set; }
    
        [Newtonsoft.Json.JsonProperty("subTitle", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string SubTitle { get; set; }
    
        [Newtonsoft.Json.JsonProperty("labelName", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string LabelName { get; set; }
    
        [Newtonsoft.Json.JsonProperty("releaseEmbargoDate", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.DateTimeOffset? ReleaseEmbargoDate { get; set; }
    
        [Newtonsoft.Json.JsonProperty("performers", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.Generic.List<Performer> Performers { get; set; }
    
        private System.Collections.Generic.IDictionary<string, object> _additionalProperties = new System.Collections.Generic.Dictionary<string, object>();
    
        [Newtonsoft.Json.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties; }
            set { _additionalProperties = value; }
        }
    
    
    }

}

#pragma warning restore 1591
#pragma warning restore 1573
#pragma warning restore  472
#pragma warning restore  114
#pragma warning restore  108